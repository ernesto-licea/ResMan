# Generated by Django 2.1.3 on 2018-11-21 19:29

import CustomUser.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.CharField(blank=True, default='', max_length=128, verbose_name='first password')),
                ('second', models.CharField(blank=True, default='', max_length=128, verbose_name='second password')),
                ('third', models.CharField(blank=True, default='', max_length=128, verbose_name='third password')),
                ('forth', models.CharField(blank=True, default='', max_length=128, verbose_name='forth password')),
            ],
            options={
                'verbose_name_plural': 'passwords history',
                'verbose_name': 'password history',
                'db_table': 'auth_password_history',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.CharField(default='active', max_length=20, verbose_name='status')),
                ('password_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='password date')),
                ('email_buzon_size', models.PositiveIntegerField(blank=True, default=0, verbose_name='email buzon size')),
                ('email_message_size', models.PositiveIntegerField(blank=True, default=0, verbose_name='email messages size')),
                ('email_domain', models.CharField(blank=True, default='local', max_length=20, verbose_name='email domain reach')),
                ('proxy_quota_type', models.CharField(blank=True, default='daily', max_length=20, verbose_name='proxy quota type')),
                ('proxy_quota_size', models.PositiveIntegerField(blank=True, default=0, verbose_name='proxy quota size')),
                ('proxy_extra_quota_size', models.PositiveIntegerField(blank=True, default=0, verbose_name='proxy extra quota size')),
                ('proxy_domain', models.CharField(blank=True, default='local', max_length=20, verbose_name='proxy domain reach')),
                ('ftp_folder', models.CharField(blank=True, default='/home/ftp', max_length=250, verbose_name='ftp folder')),
                ('ftp_size', models.PositiveIntegerField(blank=True, default=0, verbose_name='ftp size')),
                ('ftp_md5_password', models.CharField(blank=True, max_length=128, verbose_name='ftp md5 password')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
                'verbose_name': 'user',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', CustomUser.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserEnterprise',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('enterprise_number', models.CharField(default='', max_length=10, verbose_name='enterprise number')),
                ('ci_number', models.CharField(default='', max_length=11, verbose_name='ci number')),
                ('phone_number', models.CharField(default='', max_length=10, verbose_name='phone number')),
                ('extension_number', models.CharField(default='', max_length=10, verbose_name='extension number')),
                ('authorized_document', models.FileField(blank=True, upload_to=CustomUser.models.user_directory_path, verbose_name='authorized document')),
                ('note', models.TextField(blank=True, verbose_name='note')),
            ],
            options={
                'verbose_name_plural': 'enterprise users',
                'abstract': False,
                'verbose_name': 'enterprise user',
                'db_table': 'auth_user_enterprise',
            },
            bases=('CustomUser.user',),
            managers=[
                ('objects', CustomUser.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGuest',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('authorized_document', models.FileField(blank=True, upload_to=CustomUser.models.user_directory_path, verbose_name='authorized document')),
                ('note', models.TextField(blank=True, verbose_name='note')),
            ],
            options={
                'verbose_name_plural': 'guest users',
                'abstract': False,
                'verbose_name': 'guest user',
                'db_table': 'auth_user_guest',
            },
            bases=('CustomUser.user',),
            managers=[
                ('objects', CustomUser.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserInstitutional',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('notes', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'institutional users',
                'abstract': False,
                'verbose_name': 'institutional user',
                'db_table': 'auth_user_institutional',
            },
            bases=('CustomUser.user',),
            managers=[
                ('objects', CustomUser.models.CustomUserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_customuser.user_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='passwordhistory',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
